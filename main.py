import random
import string
import zipfile
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InputFile
from aiogram.utils import executor
from telethon.sync import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneNumberBannedError
import time

API_TOKEN = '7504133005:AAH-knGjlCFi1EZrpjDWrRR_q8kAaiMftVw'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ —Å–µ—Å—Å–∏–∏"),
    KeyboardButton("üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
    KeyboardButton("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π")
)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {"tokens": 0, "valid": 0, "invalid": 0}
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=main_menu)

@dp.message_handler(lambda msg: msg.text == "üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    data = user_data.get(message.from_user.id, {"tokens": 0, "valid": 0, "invalid": 0})
    await message.answer(
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {data['tokens']}\n"
        f"–í–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {data['valid']}\n"
        f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {data['invalid']}"
    )

@dp.message_handler(lambda msg: msg.text == "üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ —Å–µ—Å—Å–∏–∏")
async def ask_for_session(message: types.Message):
    await message.answer("üì© –ü—Ä–∏—à–ª–∏ .session –∏–ª–∏ .json —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏")

@dp.message_handler(lambda msg: msg.text == "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π")
async def ask_zip_file(message: types.Message):
    await message.answer("üì¶ –ü—Ä–∏—à–ª–∏ –∞—Ä—Ö–∏–≤ .zip —Å —Å–µ—Å—Å–∏—è–º–∏ (.session/.json)")

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_docs(message: types.Message):
    user_id = message.from_user.id
    doc = message.document
    file_path = f"downloads/{user_id}_{doc.file_name}"

    os.makedirs("downloads", exist_ok=True)
    await doc.download(destination_file=file_path)

    if doc.file_name.endswith(".zip"):
        valid, invalid = 0, 0
        with zipfile.ZipFile(file_path, 'r') as zip_ref:
            extract_path = f"downloads/extracted_{user_id}"
            zip_ref.extractall(extract_path)
            
            valid_dir = os.path.join(extract_path, "valid")
            invalid_dir = os.path.join(extract_path, "invalid")
            os.makedirs(valid_dir, exist_ok=True)
            os.makedirs(invalid_dir, exist_ok=True)

            for file in os.listdir(extract_path):
                if file.endswith(".session") or file.endswith(".json"):
                    full_path = os.path.join(extract_path, file)
                    try:
                        client = TelegramClient(full_path.replace('.session', ''), 26160389, '88f5d04e3d1c3c295ab7cb89ead79f89')
                        client.connect()
                        if not client.is_user_authorized():
                            raise Exception("not authorized")
                        valid += 1
                        os.rename(full_path, os.path.join(valid_dir, file))
                    except:
                        invalid += 1
                        os.rename(full_path, os.path.join(invalid_dir, file))
                    finally:
                        client.disconnect()

        zip_result = f"downloads/result_{user_id}.zip"
        with zipfile.ZipFile(zip_result, 'w') as result_zip:
            for folder in [valid_dir, invalid_dir]:
                for file in os.listdir(folder):
                    result_zip.write(os.path.join(folder, file), arcname=os.path.join(os.path.basename(folder), file))

        user_data[user_id]["valid"] += valid
        user_data[user_id]["invalid"] += invalid

        await message.answer(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–∞–ª–∏–¥–Ω—ã—Ö: {valid}\n–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {invalid}")
        await message.answer_document(InputFile(zip_result))

    elif doc.file_name.endswith(".session") or doc.file_name.endswith(".json"):
        try:
            session_path = file_path.replace(".json", "")
            client = TelegramClient(session_path, 26160389, '88f5d04e3d1c3c295ab7cb89ead79f89')
            client.connect()
            if not client.is_user_authorized():
                raise Exception("not authorized")
            me = client.get_me()

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ username
            bot_name = "Bot" + ''.join(random.choices(string.ascii_letters, k=5))
            bot_username = ''.join(random.choices(string.ascii_lowercase, k=3)) + ''.join(random.choices(string.digits, k=3)) + "_bot"

            # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather
            botfather = await client.get_entity('@BotFather')
            await client.send_message(botfather, '/newbot')
            time.sleep(1)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–æ—Ç–∞
            await client.send_message(botfather, bot_name)
            time.sleep(1)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞ –¥–ª—è –±–æ—Ç–∞
            await client.send_message(botfather, bot_username)
            time.sleep(1)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
            messages = await client.get_messages(botfather, limit=5)
            bot_token = None
            for message in messages:
                if 'Use this token' in message.text:
                    bot_token = message.text.split('Use this token')[1].strip()
                    break

            if bot_token:
                await message.answer(
                    f"‚úÖ –ù–∞–º —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞!\n\n"
                    f"üë§ –ê–∫–∫–∞—É–Ω—Ç: +{me.phone}\n"
                    f"ü§ñ –¢–æ–∫–µ–Ω: {bot_token}"
                )

                user_data[user_id]["tokens"] += 1
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω.")
            
            client.disconnect()

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
